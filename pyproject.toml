[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "performance-dashboard"
version = "1.0.0"
description = "LLM Inference Performance Dashboard"
authors = [{name = "Harshith", email = "haumesh@redhat.com"}]
license = "MIT"
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "streamlit>=1.28.0",
    "pandas>=2.0.0",
    "plotly>=5.15.0",
    "numpy>=1.24.0",
]

# Package discovery configuration
[tool.setuptools]
py-modules = ["dashboard", "dashboard_styles"]

[tool.setuptools.packages.find]
where = ["."]
include = ["*.py"]
exclude = ["data*", "deploy*", "manual_runs*", "scripts*", "docs*", "tests*"]

[project.optional-dependencies]
dev = [
    # Linting and formatting
    "ruff>=0.1.5",
    "black>=23.9.0",
    "isort>=5.12.0",

    # Type checking
    "mypy>=1.5.0",
    "pandas-stubs>=2.0.0",

    # Security scanning
    "bandit>=1.7.5",

    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",

    # Pre-commit hooks
    "pre-commit>=3.4.0",
]

# Ruff configuration (replaces flake8, pylint, and more)
[tool.ruff]
target-version = "py39"
line-length = 88
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "C90", # mccabe complexity
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise-without-from-inside-except
    "T201",  # print statements (allow for streamlit debugging)
    "C901", "E722", "SIM117", "ARG001"
]

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# mypy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Set to true for stricter typing
ignore_missing_imports = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "plotly.*",
    "pandas.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--strict-markers",
    "--strict-config",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "venv/*",
    ".venv/*",
    "*/venv/*",
    "*/.venv/*",
    "build/*",
    "dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
